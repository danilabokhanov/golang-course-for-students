// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	adpattern "homework10/internal/adpattern"
	ads "homework10/internal/ads"

	app "homework10/internal/app"

	context "context"

	mock "github.com/stretchr/testify/mock"

	user "homework10/internal/user"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// ChangeAdStatus provides a mock function with given fields: ctx, adID, userID, published
func (_m *App) ChangeAdStatus(ctx context.Context, adID int64, userID int64, published bool) (ads.Ad, error) {
	ret := _m.Called(ctx, adID, userID, published)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) (ads.Ad, error)); ok {
		return rf(ctx, adID, userID, published)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) ads.Ad); ok {
		r0 = rf(ctx, adID, userID, published)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, bool) error); ok {
		r1 = rf(ctx, adID, userID, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeUserInfo provides a mock function with given fields: ctx, userID, nickname, email
func (_m *App) ChangeUserInfo(ctx context.Context, userID int64, nickname string, email string) (user.User, error) {
	ret := _m.Called(ctx, userID, nickname, email)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) (user.User, error)); ok {
		return rf(ctx, userID, nickname, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) user.User); ok {
		r0 = rf(ctx, userID, nickname, email)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = rf(ctx, userID, nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAd provides a mock function with given fields: ctx, title, text, userID
func (_m *App) CreateAd(ctx context.Context, title string, text string, userID int64) (ads.Ad, error) {
	ret := _m.Called(ctx, title, text, userID)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) (ads.Ad, error)); ok {
		return rf(ctx, title, text, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) ads.Ad); ok {
		r0 = rf(ctx, title, text, userID)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(ctx, title, text, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserByID provides a mock function with given fields: ctx, nickname, email, userID
func (_m *App) CreateUserByID(ctx context.Context, nickname string, email string, userID int64) (user.User, error) {
	ret := _m.Called(ctx, nickname, email, userID)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) (user.User, error)); ok {
		return rf(ctx, nickname, email, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) user.User); ok {
		r0 = rf(ctx, nickname, email, userID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(ctx, nickname, email, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: ctx, adID, userID
func (_m *App) DeleteAd(ctx context.Context, adID int64, userID int64) (ads.Ad, error) {
	ret := _m.Called(ctx, adID, userID)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (ads.Ad, error)); ok {
		return rf(ctx, adID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ads.Ad); ok {
		r0 = rf(ctx, adID, userID)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, adID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserByID provides a mock function with given fields: ctx, userID
func (_m *App) DeleteUserByID(ctx context.Context, userID int64) (user.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (user.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) user.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAd provides a mock function with given fields: ctx, adID
func (_m *App) FindAd(ctx context.Context, adID int64) (ads.Ad, error) {
	ret := _m.Called(ctx, adID)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (ads.Ad, error)); ok {
		return rf(ctx, adID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) ads.Ad); ok {
		r0 = rf(ctx, adID)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, adID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUser provides a mock function with given fields: ctx, userID
func (_m *App) FindUser(ctx context.Context, userID int64) (user.User, bool, error) {
	ret := _m.Called(ctx, userID)

	var r0 user.User
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (user.User, bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) user.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) bool); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAdsByTitle provides a mock function with given fields: ctx, title
func (_m *App) GetAdsByTitle(ctx context.Context, title string) ([]ads.Ad, error) {
	ret := _m.Called(ctx, title)

	var r0 []ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]ads.Ad, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []ads.Ad); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAdsByTemplate provides a mock function with given fields: ctx, adp
func (_m *App) GetAllAdsByTemplate(ctx context.Context, adp adpattern.AdPattern) ([]ads.Ad, error) {
	ret := _m.Called(ctx, adp)

	var r0 []ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, adpattern.AdPattern) ([]ads.Ad, error)); ok {
		return rf(ctx, adp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, adpattern.AdPattern) []ads.Ad); ok {
		r0 = rf(ctx, adp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, adpattern.AdPattern) error); ok {
		r1 = rf(ctx, adp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewFilter provides a mock function with given fields: ctx
func (_m *App) GetNewFilter(ctx context.Context) (app.Filter, error) {
	ret := _m.Called(ctx)

	var r0 app.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (app.Filter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) app.Filter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAd provides a mock function with given fields: ctx, adID, userID, title, text
func (_m *App) UpdateAd(ctx context.Context, adID int64, userID int64, title string, text string) (ads.Ad, error) {
	ret := _m.Called(ctx, adID, userID, title, text)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) (ads.Ad, error)); ok {
		return rf(ctx, adID, userID, title, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) ads.Ad); ok {
		r0 = rf(ctx, adID, userID, title, text)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, string) error); ok {
		r1 = rf(ctx, adID, userID, title, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApp(t mockConstructorTestingTNewApp) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
