// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	adpattern "homework10/internal/adpattern"
	ads "homework10/internal/ads"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, title, text, userID
func (_m *Repository) Add(ctx context.Context, title string, text string, userID int64) (int64, error) {
	ret := _m.Called(ctx, title, text, userID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) (int64, error)); ok {
		return rf(ctx, title, text, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) int64); ok {
		r0 = rf(ctx, title, text, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(ctx, title, text, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, adID
func (_m *Repository) Delete(ctx context.Context, adID int64) error {
	ret := _m.Called(ctx, adID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, adID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByAuthor provides a mock function with given fields: ctx, userID
func (_m *Repository) DeleteByAuthor(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, adID
func (_m *Repository) Find(ctx context.Context, adID int64) (ads.Ad, bool) {
	ret := _m.Called(ctx, adID)

	var r0 ads.Ad
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64) (ads.Ad, bool)); ok {
		return rf(ctx, adID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) ads.Ad); ok {
		r0 = rf(ctx, adID)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) bool); ok {
		r1 = rf(ctx, adID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetAllByTemplate provides a mock function with given fields: ctx, adp
func (_m *Repository) GetAllByTemplate(ctx context.Context, adp adpattern.AdPattern) ([]ads.Ad, error) {
	ret := _m.Called(ctx, adp)

	var r0 []ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, adpattern.AdPattern) ([]ads.Ad, error)); ok {
		return rf(ctx, adp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, adpattern.AdPattern) []ads.Ad); ok {
		r0 = rf(ctx, adp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, adpattern.AdPattern) error); ok {
		r1 = rf(ctx, adp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: ctx, title
func (_m *Repository) GetByTitle(ctx context.Context, title string) ([]ads.Ad, error) {
	ret := _m.Called(ctx, title)

	var r0 []ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]ads.Ad, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []ads.Ad); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatus provides a mock function with given fields: ctx, adID, status
func (_m *Repository) SetStatus(ctx context.Context, adID int64, status bool) error {
	ret := _m.Called(ctx, adID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) error); ok {
		r0 = rf(ctx, adID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetText provides a mock function with given fields: ctx, adID, text
func (_m *Repository) SetText(ctx context.Context, adID int64, text string) error {
	ret := _m.Called(ctx, adID, text)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, adID, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTitle provides a mock function with given fields: ctx, adID, title
func (_m *Repository) SetTitle(ctx context.Context, adID int64, title string) error {
	ret := _m.Called(ctx, adID, title)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, adID, title)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
