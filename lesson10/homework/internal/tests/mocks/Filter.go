// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	adpattern "homework10/internal/adpattern"
	app "homework10/internal/app"

	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

// BasicConfig provides a mock function with given fields: ctx
func (_m *Filter) BasicConfig(ctx context.Context) (app.Filter, error) {
	ret := _m.Called(ctx)

	var r0 app.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (app.Filter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) app.Filter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPattern provides a mock function with given fields: ctx
func (_m *Filter) GetPattern(ctx context.Context) (adpattern.AdPattern, error) {
	ret := _m.Called(ctx)

	var r0 adpattern.AdPattern
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (adpattern.AdPattern, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) adpattern.AdPattern); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(adpattern.AdPattern)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAuthor provides a mock function with given fields: ctx, userID
func (_m *Filter) SetAuthor(ctx context.Context, userID int64) (app.Filter, error) {
	ret := _m.Called(ctx, userID)

	var r0 app.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (app.Filter, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) app.Filter); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLTime provides a mock function with given fields: ctx, l
func (_m *Filter) SetLTime(ctx context.Context, l time.Time) (app.Filter, error) {
	ret := _m.Called(ctx, l)

	var r0 app.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (app.Filter, error)); ok {
		return rf(ctx, l)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) app.Filter); ok {
		r0 = rf(ctx, l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRTime provides a mock function with given fields: ctx, r
func (_m *Filter) SetRTime(ctx context.Context, r time.Time) (app.Filter, error) {
	ret := _m.Called(ctx, r)

	var r0 app.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (app.Filter, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) app.Filter); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatus provides a mock function with given fields: ctx, publishedOnly
func (_m *Filter) SetStatus(ctx context.Context, publishedOnly bool) (app.Filter, error) {
	ret := _m.Called(ctx, publishedOnly)

	var r0 app.Filter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (app.Filter, error)); ok {
		return rf(ctx, publishedOnly)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) app.Filter); ok {
		r0 = rf(ctx, publishedOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(app.Filter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, publishedOnly)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFilter interface {
	mock.TestingT
	Cleanup(func())
}

// NewFilter creates a new instance of Filter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFilter(t mockConstructorTestingTNewFilter) *Filter {
	mock := &Filter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
